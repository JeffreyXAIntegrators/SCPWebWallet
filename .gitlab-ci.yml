stages:
  - Lint
  - Test
  - Build
  - Release

variables:
  package_pkgs: >-
    ./cmd/scp-webwallet
    ./resources
    ./server

default: &default_params
  ## Run tests with most recent golang version to take advantage of any perf
  ## improvements.
  image: golang:1.17
  before_script:
    - go version
    - mkdir -p .cache/gocache
    - export PATH=$PATH:$CI_PROJECT_DIR/.cache/bin/
    - export GOPATH="$CI_PROJECT_DIR/.cache"

## Default common test params for regular and nightly pipelines
.default_test_common: &default_test_common_params
  artifacts:
    name: "Testing-$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/Testing
      - $CI_PROJECT_DIR/cover/cover.out
    when: always

  after_script:
    - cp -R /tmp/Testing $CI_PROJECT_DIR/Testing

## Define the default test parameters.
.default_test: &default_test_params
  ## Merge the contents of the 'default_params' alias
  <<: *default_params
  <<: *default_test_common_params
  stage: Test

  ## disable default tests for scheduled pipelines (nightlies)
  except:
    - schedules

Lint:
  stage: Lint
  cache:
    key: lint-cache
    paths:
      - .cache

  before_script:
    - mkdir -p .cache/gocache
    - export GOCACHE=$CI_PROJECT_DIR/.cache/gocache
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.44.2
    - apt-get update
    - apt-get -y install python3-pip
    - pip3 install codespell
  script:
    - ./bin/golangci-lint run -c .golangci.yml ./...
    - git ls-files "*.md" :\!:"vendor/**" | xargs codespell --check-filenames
    - make test

Test Build:
  stage: Test
  image: golang:1.17
  needs: 
    - Lint
  artifacts:
    name: "Binaries"
    paths:
      - $CI_PROJECT_DIR/artifacts
  script:
    - ./check-builds.sh

Build Signed Binaries:
  stage: Build
  image: golang:1.17-alpine3.16
  when: manual
  needs:
    - Test Build
  artifacts:
    name: "Binaries"
    paths:
      - $CI_PROJECT_DIR/release
  script:
    - version=$(grep "=" build/version.go | awk -F '"' '{print $2}')
    - apk add bash g++ git gpg gpg-agent zip
    - ./release-scripts/ci-release.sh v$version
